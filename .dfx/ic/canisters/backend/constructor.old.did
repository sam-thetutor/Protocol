type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type Result = 
 variant {
   err: text;
   ok: record {portalID: text;};
 };
type MinerType = 
 variant {
   BOB;
   BONE;
 };
type MinerSale = 
 record {
   miner_id: text;
   miner_type: MinerType;
   offers: vec BidOffer;
   owner: principal;
   price: nat64;
 };
type Miner = 
 record {
   id: principal;
   mined_blocks: nat64;
 };
type BobInfo = 
 record {
   blocksMined: nat64;
   currentBlockMinerCount: nat64;
   nextHalvingIn: nat64;
   totalMiners: nat64;
 };
type BidOffer = 
 record {
   bid_id: nat;
   bidder: principal;
   price: nat64;
   time: int;
 };
service : {
  add_miner_for_sale: (principal) -> (definite_canister_settings);
  create_user_portal: () -> (Result);
  get_all_miners_for_sale: () -> (vec record {
                                        text;
                                        MinerSale;
                                      });
  get_all_portals: () -> (vec record {
                                principal;
                                text;
                              });
  get_bob_info: () -> (BobInfo);
  get_bob_miner_pool_hours_left: (principal) -> (nat64);
  get_miners_for_sale: (text) -> (opt MinerSale);
  get_user_miners: (principal) -> (vec Miner);
  get_user_portal: (principal) -> (text);
  remove_miner_from_sale: (text) -> (text);
  save_user_portal: (principal, text) -> ();
  upgrade_portal: (text) -> (text);
  uploadWasm: (vec nat8) -> (text);
}
